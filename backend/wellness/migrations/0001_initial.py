# Generated by Django 5.2.6 on 2025-09-22 18:02

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('engagement', 'Platform Engagement'), ('wellness', 'Wellness Activities'), ('community', 'Community Participation'), ('learning', 'Educational Content'), ('milestone', 'Personal Milestones')], max_length=20)),
                ('icon', models.CharField(help_text='Icon class name', max_length=50)),
                ('points_reward', models.PositiveIntegerField(default=10)),
                ('criteria', models.JSONField(help_text='JSON object defining achievement criteria')),
                ('is_repeatable', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'wellness_achievement',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DailyChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('mood_checkin', 'Mood Check-in'), ('breathing', 'Breathing Exercise'), ('gratitude', 'Gratitude Practice'), ('physical', 'Physical Activity'), ('social', 'Social Connection'), ('learning', 'Educational Content'), ('mindfulness', 'Mindfulness Practice')], max_length=20)),
                ('instructions', models.TextField()),
                ('points_reward', models.PositiveIntegerField(default=5)),
                ('target_value', models.PositiveIntegerField(blank=True, help_text='Target number if applicable', null=True)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'wellness_daily_challenge',
                'ordering': ['challenge_type', 'title'],
            },
        ),
        migrations.CreateModel(
            name='WellnessTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('tip_type', models.CharField(choices=[('affirmation', 'Positive Affirmation'), ('coping_strategy', 'Coping Strategy'), ('self_care', 'Self-care Tip'), ('mindfulness', 'Mindfulness Practice'), ('motivation', 'Motivational Quote')], max_length=20)),
                ('target_mood', models.JSONField(default=list, help_text='Target mood levels (1-5)')),
                ('target_age_range', models.CharField(blank=True, max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'wellness_tip',
                'ordering': ['tip_type', 'title'],
            },
        ),
        migrations.CreateModel(
            name='UserPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('current_streak', models.PositiveIntegerField(default=0)),
                ('longest_streak', models.PositiveIntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('level', models.PositiveIntegerField(default=1)),
                ('points_to_next_level', models.PositiveIntegerField(default=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='points', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'wellness_user_points',
            },
        ),
        migrations.CreateModel(
            name='MoodEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mood_rating', models.PositiveIntegerField(choices=[(1, 'Very Low'), (2, 'Low'), (3, 'Neutral'), (4, 'Good'), (5, 'Very Good')])),
                ('energy_level', models.PositiveIntegerField(choices=[(1, 'Very Low'), (2, 'Low'), (3, 'Moderate'), (4, 'High'), (5, 'Very High')])),
                ('anxiety_level', models.PositiveIntegerField(help_text='1=Very Low, 5=Very High', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('sleep_quality', models.PositiveIntegerField(help_text='1=Very Poor, 5=Excellent', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('notes', models.TextField(blank=True, max_length=500)),
                ('activities', models.JSONField(default=list, help_text='Activities done today')),
                ('triggers', models.JSONField(default=list, help_text='Potential mood triggers')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mood_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'wellness_mood_entry',
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('points_earned', models.PositiveIntegerField()),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wellness.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'wellness_user_achievement',
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='UserChallengeCompletion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('completion_date', models.DateField(default=django.utils.timezone.now)),
                ('completion_value', models.PositiveIntegerField(blank=True, help_text='Actual value achieved', null=True)),
                ('notes', models.TextField(blank=True, max_length=300)),
                ('points_earned', models.PositiveIntegerField()),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wellness.dailychallenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_completions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'wellness_user_challenge_completion',
                'ordering': ['-completed_at'],
                'unique_together': {('user', 'challenge', 'completion_date')},
            },
        ),
        migrations.CreateModel(
            name='UserWellnessTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shown_at', models.DateTimeField(auto_now_add=True)),
                ('is_helpful', models.BooleanField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wellness.wellnesstip')),
            ],
            options={
                'db_table': 'wellness_user_tip',
                'ordering': ['-shown_at'],
                'unique_together': {('user', 'tip')},
            },
        ),
    ]
    